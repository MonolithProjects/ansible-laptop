set -gx KUBE_EDITOR nvim
set -gx PATH $PATH:$HOME/.local/bin
set -gx PATH /var/lib/snapd/snap/bin $PATH
set -gx PATH $PATH $HOME/.krew/bin
set -gx PATH $PATH /usr/local/go/bin
set -gx XDG_SESSION_TYPE wayland
{# set -gx TF_PLUGIN_CACHE_DIR $HOME/.terraform.d/plugin-cache #}

set -gx HELM_DIFF_COLOR true
{# set -gx PATH $PATH /home/linuxbrew/.linuxbrew/bin #}
source ~/.asdf/asdf.fish

function awsve
  set AWS_VAULT
  if [ $argv != pixel_cn ] && [ $argv != clear ]
    aws-vault exec $argv --
  else
    if [ $argv = pixel_cn ]
      aws-vault exec $argv --no-session --
    else
      set -e AWS_SESSION_TOKEN AWS_SECURITY_TOKEN AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN AWS_SECURITY_TOKEN
    end
  end
end

{# function fish_prompt
    set --local exit_code $status  # save previous exit code

    echo -e -n (_pure_prompt_beginning)  # init prompt context (clear current line, etc.)
    echo -e (awsvault_status) (_pure_prompt_first_line)  # print current path, git branch/status, command duration
    _pure_place_iterm2_prompt_mark # place iTerm shell integration mark
    echo -e -n (_pure_prompt $exit_code)  # print prompt
    echo -e (_pure_prompt_ending)  # reset colors and end prompt

    set _pure_fresh_session false
end #}

function kubectl_status
  [ -z "$KUBECTL_PROMPT_ICON" ]; and set -l KUBECTL_PROMPT_ICON "k8s:"
  [ -z "$KUBECTL_PROMPT_SEPARATOR" ]; and set -l KUBECTL_PROMPT_SEPARATOR "/"
  set -l config $KUBECONFIG
  [ -z "$config" ]; and set -l config "$HOME/.kube/default"
  if [ ! -f $config ]
    echo (set_color blue)$KUBECTL_PROMPT_ICON""(set_color brblack)"no_config"
    return
  end

  set -l ctx (kubectl config current-context 2>/dev/null)
  if [ $status -ne 0 ]
    echo (set_color blue)$KUBECTL_PROMPT_ICON""(set_color brblue)"no_context"
    return
  end

  set -l ns (kubectl config view -o "jsonpath={.contexts[?(@.name==\"$ctx\")].context.namespace}")
  [ -z $ns ]; and set -l ns 'default'

  echo (set_color blue)$KUBECTL_PROMPT_ICON""(set_color brblue)"($ctx$KUBECTL_PROMPT_SEPARATOR$ns)"
end

function awsvault_status
  [ -z "$AWSVAULT_PROMPT_ICON" ]; and set -l AWSVAULT_PROMPT_ICON "awsvault:"

  if [ -z $AWS_VAULT ]
    echo (set_color blue)$AWSVAULT_PROMPT_ICON(set_color brblack)"none"
    return
  end

  if [ ! -z $AWS_VAULT ]
    echo (set_color blue)$AWSVAULT_PROMPT_ICON(set_color brblue)"$AWS_VAULT"
    return
  end
end

#end
